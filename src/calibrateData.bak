#ifndef CALIBRATEDATA_H
#define CALIBRATEDATA_H

#include <Arduino.h>
#include <Wire.h>

#include <I2Cdev.h>

#define USE_LIBRARY2
#ifdef USE_LIBRARY2
#include <MPU6050.h>

MPU6050 MPU3;

extern int16_t ax, ay, az, gx, gy, gz;
int buffersize = 1000;
int acel_deadzone = 8;
int giro_deadzone = 1;
int mean_ax = 0, mean_ay = 0, mean_az = 0, mean_gx = 0, mean_gy = 0, mean_gz = 0;
int state = 0;
int ax_offset, ay_offset, az_offset, gx_offset, gy_offset, gz_offset;

void meansensors() {
    long i = 0, buff_ax = 0, buff_ay = 0, buff_az = 0, buff_gx = 0, buff_gy = 0, buff_gz = 0;
    while (i < (buffersize + 101)) {
        MPU3.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);

        if (i > 100 && i <= (buffersize + 100)) {
            buff_ax = buff_ax + ax;
            buff_ay = buff_ay + ay;
            buff_az = buff_az + az;
            buff_gx = buff_gx + gx;
            buff_gy = buff_gy + gy;
            buff_gz = buff_gz + gz;
        }

        if (i == (buffersize + 100)) {
            mean_ax = buff_ax / buffersize;
            mean_ay = buff_ay / buffersize;
            mean_az = buff_az / buffersize;
            mean_gx = buff_gx / buffersize;
            mean_gy = buff_gy / buffersize;
            mean_gz = buff_gz / buffersize;
        }
        i++;
        delay(2); 
    }
};

void calibration() {
    ax_offset = -mean_ax / 8;
    ay_offset = -mean_ay / 8;
    az_offset = (8192 - mean_az) / 8;
    gx_offset = -mean_gx / 4;
    gy_offset = -mean_gy / 4;
    gz_offset = -mean_gz / 4;

    while (1) {
        int ready = 0;
        MPU3.setXAccelOffset(ax_offset);
        MPU3.setYAccelOffset(ay_offset);
        MPU3.setZAccelOffset(az_offset);
        MPU3.setXGyroOffset(gx_offset);
        MPU3.setYGyroOffset(gy_offset);
        MPU3.setZGyroOffset(gz_offset);

        meansensors();

        Serial.println("...");

        if (abs(mean_ax) <= acel_deadzone)
            ready++;
        else
            ax_offset = ax_offset - mean_ax / acel_deadzone;

        if (abs(mean_ay) <= acel_deadzone)
            ready++;
        else
            ay_offset = ay_offset - mean_ay / acel_deadzone;

        if (abs(8192 - mean_az) <= acel_deadzone)
            ready++;
        else
            az_offset = az_offset + (8192 - mean_az) / acel_deadzone;

        if (abs(mean_gx) <= giro_deadzone)
            ready++;
        else
            gx_offset = gx_offset - mean_gx / (giro_deadzone + 1);

        if (abs(mean_gy) <= giro_deadzone)
            ready++;
        else
            gy_offset = gy_offset - mean_gy / (giro_deadzone + 1);

        if (abs(mean_gz) <= giro_deadzone)
            ready++;
        else
            gz_offset = gz_offset - mean_gz / (giro_deadzone + 1);

        if (ready == 6)
            break;
    }
};

void calibrateDatasetup() {
    Serial.println("\nMPU6050 Calibration Sketch");
    delay(2000);
    Serial.println("\nYour MPU6050 should be placed in horizontal position, with package letters facing up. \nDon't touch it until you see a finish message.\n");
    delay(3000);

    MPU3.setXAccelOffset(0); 
    MPU3.setYAccelOffset(0); 
    MPU3.setZAccelOffset(0); 
    MPU3.setXGyroOffset(0); 
    MPU3.setYGyroOffset(0); 
    MPU3.setZGyroOffset(0); 
};

void calibrateDataloop() {
    if (state == 0) {
        Serial.println("\nReading sensors for first time...");
        meansensors();
        state++;
        delay(1000);
    }

    if (state == 1) {
        Serial.println("\nCalculating offsets...");
        calibration();
        state++;
        delay(1000);
    }

    if (state == 2) {
        meansensors();
        Serial.println("\nFINISHED!");
        Serial.print("\nSensor readings with offsets:\t");
        Serial.print(mean_ax);
        Serial.print("\t");
        Serial.print(mean_ay);
        Serial.print("\t");
        Serial.print(mean_az);
        Serial.print("\t");
        Serial.print(mean_gx);
        Serial.print("\t");
        Serial.print(mean_gy);
        Serial.print("\t");
        Serial.println(mean_gz);
        Serial.print("Your offsets:\t");
        Serial.print(ax_offset);
        Serial.print("\t");
        Serial.print(ay_offset);
        Serial.print("\t");
        Serial.print(az_offset);
        Serial.print("\t");
        Serial.print(gx_offset);
        Serial.print("\t");
        Serial.print(gy_offset);
        Serial.print("\t");
        Serial.println(gz_offset);
        Serial.println("\nData is printed as: acelX acelY acelZ giroX giroY giroZ");
        Serial.println("Check that your sensor readings are close to 0 0 8192 0 0 0"); // based on setAccelerometerRange(MPU6050_RANGE_4_G) = 8192
        Serial.println("If calibration was succesful write down your offsets so you can set them in your projects using something similar to mpu.setXAccelOffset(youroffset)");
    }
};

void calibrateData() {
    calibrateDatasetup();
    Serial.println("Calibrating MPU6050");
    calibrateDataloop();
    Serial.println("Calibration Complete!");
};

#endif // USE_LIBRARY2

#endif // CALIBRATEDATA_H
